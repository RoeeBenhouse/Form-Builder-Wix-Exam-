import * as filterSelectors from '../store/selectors';
import FormatSize from '@material-ui/icons/FormatSize';
import IconButton from '@material-ui/core/IconButton';
import React, { Component } from 'react';
import Switch from '@material-ui/core/Switch';
import TextField from '@material-ui/core/TextField';
import Toolbar from '@material-ui/core/Toolbar';
import Tooltip from '@material-ui/core/Tooltip';
import { KeyboardDatePicker } from '@material-ui/pickers';
import moment from 'moment';

export var SearchField = function SearchField(_ref) {
  var theme = _ref.theme,
      queryIndex = _ref.queryIndex,
      currentField = _ref.currentField,
      query = _ref.query,
      formatMessage = _ref.formatMessage,
      fields = _ref.fields,
      handleQueryChange = _ref.handleQueryChange,
      DateTimeFormat = _ref.DateTimeFormat,
      locale = _ref.locale,
      okLabel = _ref.okLabel,
      cancelLabel = _ref.cancelLabel;

  var _filterSelectors$sele = filterSelectors.selectQueryProps(query),
      value = _filterSelectors$sele.value,
      isCaseSensitive = _filterSelectors$sele.isCaseSensitive;

  if (queryIndex == null || currentField == null || query == null || handleQueryChange == null || fields == null) {
    return React.createElement('div', null);
  }

  var fieldType = '';
  var fieldLabel = '';

  fields.map(function (field) {
    if (field.name === currentField.value) {
      fieldType = field.type;
      fieldLabel = field.label;
    }
    return field;
  });

  if (fieldType === 'date') {
    return React.createElement(
      Toolbar,
      null,
      React.createElement(KeyboardDatePicker, {
        clearable: true,
        label: formatMessage ? formatMessage({ id: 'enter_query_text' }) : '',
        format: 'DD/MM/YYYY',
        placeholder: moment().format('DD/MM/YYYY'),
        value: value,
        onChange: function onChange(val) {
          handleQueryChange(queryIndex, 'value', val ? val.format() : null);
        },
        autoOk: true,
        animateYearScrolling: false
      })
    );
  }

  if (fieldType === 'bool') {
    return React.createElement(
      Toolbar,
      null,
      React.createElement(Switch, {
        label: fieldLabel,
        onChange: function onChange(e, val) {
          handleQueryChange(queryIndex, 'value', val);
        },
        value: value
      })
    );
  } else {
    //string

    return React.createElement(
      Toolbar,
      null,
      React.createElement(TextField, {
        fullWidth: true,
        name: 'value',
        onChange: function onChange(e, val) {
          handleQueryChange(queryIndex, 'value', e.target.value);
        },
        value: value ? value : '',
        placeholder: formatMessage ? formatMessage({ id: 'enter_query_text' }) : ''
      }),
      React.createElement(
        Tooltip,
        {
          id: 'tooltip-bottom-start',
          title: formatMessage ? formatMessage({ id: isCaseSensitive ? 'disable_case_sensitivity' : 'enable_case_sensitivity' }) : '',
          placement: 'bottom-end'
        },
        React.createElement(
          IconButton,
          {
            onClick: function onClick() {
              handleQueryChange(queryIndex, 'isCaseSensitive', !isCaseSensitive);
            },
            color: isCaseSensitive ? 'primary' : undefined
          },
          React.createElement(FormatSize, null)
        )
      )
    );
  }
};