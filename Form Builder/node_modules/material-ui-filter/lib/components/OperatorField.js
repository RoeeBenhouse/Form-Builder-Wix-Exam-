'use strict';

exports.__esModule = true;
exports.OperatorField = undefined;

var _selectors = require('../store/selectors');

var filterSelectors = _interopRequireWildcard(_selectors);

var _Delete = require('@material-ui/icons/Delete');

var _Delete2 = _interopRequireDefault(_Delete);

var _IconButton = require('@material-ui/core/IconButton');

var _IconButton2 = _interopRequireDefault(_IconButton);

var _Input = require('@material-ui/core/Input');

var _Input2 = _interopRequireDefault(_Input);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Toolbar = require('@material-ui/core/Toolbar');

var _Toolbar2 = _interopRequireDefault(_Toolbar);

var _Tooltip = require('@material-ui/core/Tooltip');

var _Tooltip2 = _interopRequireDefault(_Tooltip);

var _muishift = require('muishift');

var _styles = require('@material-ui/core/styles');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var styles = {};

var OperatorField = exports.OperatorField = function OperatorField(_ref) {
  var queryIndex = _ref.queryIndex,
      currentField = _ref.currentField,
      query = _ref.query,
      fields = _ref.fields,
      operators = _ref.operators,
      handleQueryChange = _ref.handleQueryChange,
      formatMessage = _ref.formatMessage,
      classes = _ref.classes,
      onClick = _ref.onClick;

  var getFieldType = function getFieldType(currentField) {
    var fieldType = '';

    fields.map(function (field) {
      if (field.name === currentField.value) {
        fieldType = field.type;
      }
      return field;
    });

    return fieldType;
  };

  var _filterSelectors$sele = filterSelectors.selectQueryProps(query),
      operator = _filterSelectors$sele.operator,
      isCaseSensitive = _filterSelectors$sele.isCaseSensitive;

  if (queryIndex == null || currentField == null || query == null || handleQueryChange == null || fields == null) {
    return _react2.default.createElement('div', null);
  }

  var fieldType = getFieldType(currentField);
  var divFields = [];

  operators.map(function (operator) {
    if (operator.type === fieldType || operator.type === 'string' && fieldType === undefined) {
      operator.operators.map(function (op) {
        return divFields.push({
          value: op.value,
          label: op.label
        });
      });
    }
    return divFields;
  });

  return _react2.default.createElement(
    _Toolbar2.default,
    null,
    _react2.default.createElement(
      'div',
      { style: { maxWidth: 160 } },
      _react2.default.createElement(_muishift.SelectField, {
        input: { value: operator },
        onChange: function onChange(val) {
          handleQueryChange(queryIndex, 'operator', val);
        },
        items: divFields,
        itemToString: function itemToString(item) {
          return item ? item.label : '';
        },
        id: 'react-select-single',
        inputProps: {
          fullWidth: true,
          placeholder: formatMessage ? formatMessage({ id: 'hint_autocomplete' }) : 'Select operator'
        }
      })
    ),
    _react2.default.createElement(
      _Tooltip2.default,
      {
        id: 'tooltip-bottom-start',
        title: formatMessage ? formatMessage({ id: isCaseSensitive ? 'disable_case_sensitivity' : 'enable_case_sensitivity' }) : '',
        placement: 'bottom-end'
      },
      _react2.default.createElement(
        _IconButton2.default,
        { onClick: onClick, 'aria-label': 'Delete', color: 'secondary' },
        _react2.default.createElement(_Delete2.default, null)
      )
    )
  );
};

exports.default = (0, _styles.withStyles)(styles)(OperatorField);